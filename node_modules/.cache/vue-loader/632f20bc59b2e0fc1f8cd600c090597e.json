{"remainingRequest":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/YallaAdmin/src/router/views/email/sidepanel.vue?vue&type=template&id=53e76568&","dependencies":[{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/src/router/views/email/sidepanel.vue","mtime":1595408872000},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606587964121},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/index.js","mtime":1606587964121}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiZW1haWwtbGVmdGJhciBjYXJkIiB9LAogICAgWwogICAgICBfYygKICAgICAgICAiYi1idXR0b24iLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7IHZhcmlhbnQ6ICJkYW5nZXIiIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbCA9IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiQ29tcG9zZSIpXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAibWFpbC1saXN0IG10LTQiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJhY3RpdmUiLCBhdHRyczogeyB0YWc6ICJhIiwgdG86ICIvZW1haWwvaW5ib3giIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogIm1kaSBtZGktZW1haWwtb3V0bGluZSBtci0yIiB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIiBJbmJveCAiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJtbC0xIGZsb2F0LXJpZ2h0IiB9LCBbX3ZtLl92KCIoMTgpIildKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0YWc6ICJhIiwgdG86ICIvZW1haWwvaW5ib3giIH0gfSwgWwogICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJtZGkgbWRpLXN0YXItb3V0bGluZSBtci0yIiB9KSwKICAgICAgICAgICAgX3ZtLl92KCJTdGFycmVkICIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdGFnOiAiYSIsIHRvOiAiL2VtYWlsL2luYm94IiB9IH0sIFsKICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAibWRpIG1kaS1kaWFtb25kLXN0b25lIG1yLTIiIH0pLAogICAgICAgICAgICBfdm0uX3YoIkltcG9ydGFudCAiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7IGF0dHJzOiB7IHRhZzogImEiLCB0bzogIi9lbWFpbC9pbmJveCIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogIm1kaSBtZGktZmlsZS1vdXRsaW5lIG1yLTIiIH0pLAogICAgICAgICAgICBfdm0uX3YoIkRyYWZ0ICIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdGFnOiAiYSIsIHRvOiAiL2VtYWlsL2luYm94IiB9IH0sIFsKICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAibWRpIG1kaS1lbWFpbC1jaGVjay1vdXRsaW5lIG1yLTIiIH0pLAogICAgICAgICAgICBfdm0uX3YoIlNlbnQgTWFpbCAiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7IGF0dHJzOiB7IHRhZzogImEiLCB0bzogIi9lbWFpbC9pbmJveCIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogIm1kaSBtZGktdHJhc2gtY2FuLW91dGxpbmUgbXItMiIgfSksCiAgICAgICAgICAgIF92bS5fdigiVHJhc2ggIikKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtdC00IiB9LCBbX3ZtLl92KCJMYWJlbHMiKV0pLAogICAgICBfdm0uX20oMCksCiAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtdC00IiB9LCBbX3ZtLl92KCJDaGF0IildKSwKICAgICAgX3ZtLl9tKDEpLAogICAgICBfYygKICAgICAgICAiYi1tb2RhbCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsgdGl0bGU6ICJOZXcgTWVzc2FnZSIsIGNlbnRlcmVkOiAiIiB9LAogICAgICAgICAgc2NvcGVkU2xvdHM6IF92bS5fdShbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBrZXk6ICJtb2RhbC1mb290ZXIiLAogICAgICAgICAgICAgIGZuOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFyaWFudDogInNlY29uZGFyeSIgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2xvc2UiKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImItYnV0dG9uIiwgeyBhdHRyczogeyB2YXJpYW50OiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgU2VuZCAiKSwKICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYWIgZmEtdGVsZWdyYW0tcGxhbmUgbWwtMSIgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHByb3h5OiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIF0pLAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5zaG93TW9kYWwsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsID0gJCR2CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJzaG93TW9kYWwiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZm9ybSIsIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImVtYWlsIiwgcGxhY2Vob2xkZXI6ICJUbyIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiIH0sIFsKICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIHBsYWNlaG9sZGVyOiAiU3ViamVjdCIgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiY2tlZGl0b3IiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGVkaXRvcjogX3ZtLmVkaXRvciB9LAogICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZWRpdG9yRGF0YSwKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICBfdm0uZWRpdG9yRGF0YSA9ICQkdgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImVkaXRvckRhdGEiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYWlsLWxpc3QgbXQtMSIgfSwgWwogICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6IHZvaWQoMCk7IiB9IH0sIFsKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWRpIG1kaS1hcnJvdy1yaWdodC1kcm9wLWNpcmNsZSB0ZXh0LWluZm8gZmxvYXQtcmlnaHQiCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCJUaGVtZSBTdXBwb3J0ICIpCiAgICAgIF0pLAogICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6IHZvaWQoMCk7IiB9IH0sIFsKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAibWRpIG1kaS1hcnJvdy1yaWdodC1kcm9wLWNpcmNsZSB0ZXh0LXdhcm5pbmcgZmxvYXQtcmlnaHQiCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCJGcmVlbGFuY2UgIikKICAgICAgXSksCiAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiamF2YXNjcmlwdDogdm9pZCgwKTsiIH0gfSwgWwogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICJtZGkgbWRpLWFycm93LXJpZ2h0LWRyb3AtY2lyY2xlIHRleHQtcHJpbWFyeSBmbG9hdC1yaWdodCIKICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIlNvY2lhbCAiKQogICAgICBdKSwKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJqYXZhc2NyaXB0OiB2b2lkKDApOyIgfSB9LCBbCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm1kaSBtZGktYXJyb3ctcmlnaHQtZHJvcC1jaXJjbGUgdGV4dC1kYW5nZXIgZmxvYXQtcmlnaHQiCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCJGcmllbmRzICIpCiAgICAgIF0pLAogICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6IHZvaWQoMCk7IiB9IH0sIFsKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAibWRpIG1kaS1hcnJvdy1yaWdodC1kcm9wLWNpcmNsZSB0ZXh0LXN1Y2Nlc3MgZmxvYXQtcmlnaHQiCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCJGYW1pbHkgIikKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibXQtMiIgfSwgWwogICAgICBfYygKICAgICAgICAiYSIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogIm1lZGlhIiwgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6IHZvaWQoMCk7IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkLWZsZXggbXItMyByb3VuZGVkLWNpcmNsZSIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvdXNlcnMvYXZhdGFyLTIuanBnIiksCiAgICAgICAgICAgICAgYWx0OiAiR2VuZXJpYyBwbGFjZWhvbGRlciBpbWFnZSIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMzYiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZWRpYS1ib2R5IGNoYXQtdXNlci1ib3giIH0sIFsKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidXNlci10aXRsZSBtLTAiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNjb3R0IE1lZGlhbiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbX3ZtLl92KCJIZWxsbyIpXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYSIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogIm1lZGlhIiwgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6IHZvaWQoMCk7IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkLWZsZXggbXItMyByb3VuZGVkLWNpcmNsZSIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvdXNlcnMvYXZhdGFyLTMuanBnIiksCiAgICAgICAgICAgICAgYWx0OiAiR2VuZXJpYyBwbGFjZWhvbGRlciBpbWFnZSIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMzYiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZWRpYS1ib2R5IGNoYXQtdXNlci1ib3giIH0sIFsKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidXNlci10aXRsZSBtLTAiIH0sIFtfdm0uX3YoIkp1bGlhbiBSb3NhIildKSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiV2hhdCBhYm91dCBvdXIgbmV4dC4uIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiYSIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogIm1lZGlhIiwgYXR0cnM6IHsgaHJlZjogImphdmFzY3JpcHQ6IHZvaWQoMCk7IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkLWZsZXggbXItMyByb3VuZGVkLWNpcmNsZSIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvdXNlcnMvYXZhdGFyLTQuanBnIiksCiAgICAgICAgICAgICAgYWx0OiAiR2VuZXJpYyBwbGFjZWhvbGRlciBpbWFnZSIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMzYiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZWRpYS1ib2R5IGNoYXQtdXNlci1ib3giIH0sIFsKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidXNlci10aXRsZSBtLTAiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkRhdmlkIE1lZGluYSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJZZWFoIGV2ZXJ5dGhpbmcgaXMgZmluZSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImEiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtZWRpYSIsIGF0dHJzOiB7IGhyZWY6ICJqYXZhc2NyaXB0OiB2b2lkKDApOyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZC1mbGV4IG1yLTMgcm91bmRlZC1jaXJjbGUiLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL3VzZXJzL2F2YXRhci02LmpwZyIpLAogICAgICAgICAgICAgIGFsdDogIkdlbmVyaWMgcGxhY2Vob2xkZXIgaW1hZ2UiLAogICAgICAgICAgICAgIGhlaWdodDogIjM2IgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWVkaWEtYm9keSBjaGF0LXVzZXItYm94IiB9LCBbCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInVzZXItdGl0bGUgbS0wIiB9LCBbX3ZtLl92KCJKYXkgQmFrZXIiKV0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiB9LCBbX3ZtLl92KCJXb3cgdGhhdCdzIGdyZWF0IildKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}
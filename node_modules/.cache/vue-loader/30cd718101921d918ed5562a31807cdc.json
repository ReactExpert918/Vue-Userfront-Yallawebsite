{"remainingRequest":"/Users/michaelfigg/Documents/GitHub/yallastorefrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/yallastorefrontend/src/router/views/chat/index.vue?vue&type=template&id=128d664e&","dependencies":[{"path":"/Users/michaelfigg/Documents/GitHub/yallastorefrontend/src/router/views/chat/index.vue","mtime":1606131250000},{"path":"/Users/michaelfigg/Documents/GitHub/yallastorefrontend/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/yallastorefrontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606587964121},{"path":"/Users/michaelfigg/Documents/GitHub/yallastorefrontend/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/yallastorefrontend/node_modules/vue-loader/lib/index.js","mtime":1606587964121}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
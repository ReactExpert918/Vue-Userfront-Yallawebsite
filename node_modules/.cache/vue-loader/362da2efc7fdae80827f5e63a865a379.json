{"remainingRequest":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/YallaAdmin/src/router/views/tasks/kanbanboard.vue?vue&type=template&id=26f7cd00&","dependencies":[{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/src/router/views/tasks/kanbanboard.vue","mtime":1604156084000},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606587964121},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/index.js","mtime":1606587964121}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
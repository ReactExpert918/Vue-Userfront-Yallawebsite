{"remainingRequest":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/YallaAdmin/src/router/views/utility/faqs.vue?vue&type=template&id=35730744&","dependencies":[{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/src/router/views/utility/faqs.vue","mtime":1594889274000},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606587964121},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/index.js","mtime":1606587964121}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/YallaAdmin/src/router/views/catalog/products/edit/edit.vue?vue&type=template&id=9ff7e890&","dependencies":[{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/src/router/views/catalog/products/edit/edit.vue","mtime":1609197288350},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606587964121},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/YallaAdmin/node_modules/vue-loader/lib/index.js","mtime":1606587964121}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
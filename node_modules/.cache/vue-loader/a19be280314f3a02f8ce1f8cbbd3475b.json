{"remainingRequest":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/yallastoreadmin/src/router/views/invoices/list.vue?vue&type=template&id=c18379ce&","dependencies":[{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/src/router/views/invoices/list.vue","mtime":1594889274000},{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606587964121},{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/vue-loader/lib/index.js","mtime":1606587964121}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
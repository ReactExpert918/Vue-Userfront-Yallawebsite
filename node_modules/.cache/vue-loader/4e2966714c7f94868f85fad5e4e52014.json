{"remainingRequest":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/michaelfigg/Documents/GitHub/yallastoreadmin/src/router/views/ui/buttons.vue?vue&type=template&id=8557d1f8&","dependencies":[{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/src/router/views/ui/buttons.vue","mtime":1604162918000},{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1606587964121},{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/cache-loader/dist/cjs.js","mtime":1606587962276},{"path":"/Users/michaelfigg/Documents/GitHub/yallastoreadmin/node_modules/vue-loader/lib/index.js","mtime":1606587964121}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQo8TGF5b3V0Pg0KICAgIDxQYWdlSGVhZGVyIDp0aXRsZT0idGl0bGUiIDppdGVtcz0iaXRlbXMiIC8+DQogICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJjYXJkLXRpdGxlIj5EZWZhdWx0IGJ1dHRvbnM8L2g0Pg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10aXRsZS1kZXNjIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIEJvb3RzdHJhcCBpbmNsdWRlcyBzaXggcHJlZGVmaW5lZCBidXR0b24gc3R5bGVzLCBlYWNoIHNlcnZpbmcgaXRzDQogICAgICAgICAgICAgICAgICAgICAgICBvd24gc2VtYW50aWMgcHVycG9zZS4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24taXRlbXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9InByaW1hcnkiPlByaW1hcnk8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9InNlY29uZGFyeSI+U2Vjb25kYXJ5PC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzdWNjZXNzIj5TdWNjZXNzPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJpbmZvIj5JbmZvPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJ3YXJuaW5nIj5XYXJuaW5nPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJkYW5nZXIiPkRhbmdlcjwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0iZGFyayI+RGFyazwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ibGluayI+TGluazwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ibGlnaHQiPkxpZ2h0PC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+DQogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iY2FyZC10aXRsZSI+T3V0bGluZSBidXR0b25zPC9oND4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGl0bGUtZGVzYyI+DQogICAgICAgICAgICAgICAgICAgICAgICBSZXBsYWNlIHRoZSBkZWZhdWx0IG1vZGlmaWVyIGNsYXNzZXMgd2l0aCB0aGUNCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNsYXNzPSJoaWdobGlnaHRlci1yb3VnZSI+b3V0bGluZS0qPC9jb2RlPiBvbmVzIHRvIHJlbW92ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgYWxsIGJhY2tncm91bmQgaW1hZ2VzIGFuZCBjb2xvcnMgb24gYW55IGJ1dHRvbi4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24taXRlbXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9Im91dGxpbmUtcHJpbWFyeSI+UHJpbWFyeTwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1zZWNvbmRhcnkiPlNlY29uZGFyeTwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1zdWNjZXNzIj5TdWNjZXNzPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJvdXRsaW5lLWluZm8iPkluZm88L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9Im91dGxpbmUtd2FybmluZyI+V2FybmluZzwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1kYW5nZXIiPkRhbmdlcjwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1kYXJrIj5EYXJrPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJvdXRsaW5lLWxpZ2h0Ij5MaWdodDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDwhLS0gZW5kIHJvdyAtLT4NCg0KICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+DQogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iY2FyZC10aXRsZSI+Um91bmRlZCBidXR0b25zPC9oND4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGl0bGUtZGVzYyI+DQogICAgICAgICAgICAgICAgICAgICAgICBVc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlPnBpbGw8L2NvZGU+IGZvciBidXR0b24gcm91bmQgYm9yZGVyLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbi1pdGVtcyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gcGlsbCB2YXJpYW50PSJwcmltYXJ5Ij5QcmltYXJ5PC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiBwaWxsIHZhcmlhbnQ9InNlY29uZGFyeSI+U2Vjb25kYXJ5PC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiBwaWxsIHZhcmlhbnQ9InN1Y2Nlc3MiPlN1Y2Nlc3M8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHBpbGwgdmFyaWFudD0iaW5mbyI+SW5mbzwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gcGlsbCB2YXJpYW50PSJ3YXJuaW5nIj5XYXJuaW5nPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiBwaWxsIHZhcmlhbnQ9ImRhbmdlciI+RGFuZ2VyPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiBwaWxsIHZhcmlhbnQ9ImRhcmsiPkRhcms8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHBpbGwgdmFyaWFudD0ibGluayI+TGluazwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gcGlsbCB2YXJpYW50PSJsaWdodCI+TGlnaHQ8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJjYXJkLXRpdGxlIj5CdXR0b25zIHdpdGggaWNvbjwvaDQ+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRpdGxlLWRlc2MiPkFkZCBpY29uIGluIGJ1dHRvbi48L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9uLWl0ZW1zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJwcmltYXJ5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtc21pbGUgZm9udC1zaXplLTE2IGFsaWduLW1pZGRsZSBtci0yIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpbWFyeQ0KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzdWNjZXNzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtY2hlY2stZG91YmxlIGZvbnQtc2l6ZS0xNiBhbGlnbi1taWRkbGUgbXItMiI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1Y2Nlc3MNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0id2FybmluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImJ4IGJ4LWVycm9yIGZvbnQtc2l6ZS0xNiBhbGlnbi1taWRkbGUgbXItMiI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdhcm5pbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0iZGFuZ2VyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtYmxvY2sgZm9udC1zaXplLTE2IGFsaWduLW1pZGRsZSBtci0yIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGFuZ2VyDQogICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9ImRhcmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJieCBieC1sb2FkZXIgYngtc3BpbiBmb250LXNpemUtMTYgYWxpZ24tbWlkZGxlIG1yLTIiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2FkaW5nDQogICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9ImxpZ2h0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtaG91cmdsYXNzIGJ4LXNwaW4gZm9udC1zaXplLTE2IGFsaWduLW1pZGRsZSBtci0yIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9hZGluZw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPCEtLSBlbmQgcm93IC0tPg0KICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUiPlNuaXAgQnV0dG9uczwvaDQ+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXNpemUtMTUgbWItMyI+RXhhbXBsZSAxPC9oNT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIGJ0bi1ncm91cC1leGFtcGxlIG1iLTMiIHJvbGU9Imdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1wcmltYXJ5IiBjbGFzcz0idy1zbSI+TGVmdDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9Im91dGxpbmUtcHJpbWFyeSIgY2xhc3M9Inctc20iPk1pZGRsZTwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9Im91dGxpbmUtcHJpbWFyeSIgY2xhc3M9Inctc20iPlJpZ2h0PC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCBidG4tZ3JvdXAtZXhhbXBsZSBtYi0zIiByb2xlPSJncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJwcmltYXJ5IiBjbGFzcz0idy14cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS10aHVtYi11cCI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0iZGFuZ2VyIiBjbGFzcz0idy14cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS10aHVtYi1kb3duIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAgYnRuLWdyb3VwLWV4YW1wbGUiIHJvbGU9Imdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9Im91dGxpbmUtc2Vjb25kYXJ5IiBjbGFzcz0idy14cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtbWVudS1hbHQtcmlnaHQiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9Im91dGxpbmUtc2Vjb25kYXJ5IiBjbGFzcz0idy14cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtbWVudSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ib3V0bGluZS1zZWNvbmRhcnkiIGNsYXNzPSJ3LXhzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJieCBieC1tZW51LWFsdC1sZWZ0Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtc2l6ZS0xNSBtYi0zIj5FeGFtcGxlIDI8L2g1Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbi1pdGVtcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0icHJpbWFyeSIgY2xhc3M9ImJ0bi1sYWJlbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImJ4IGJ4LXNtaWxlIGxhYmVsLWljb24iPjwvaT4gUHJpbWFyeQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzdWNjZXNzIiBjbGFzcz0iYnRuLWxhYmVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtY2hlY2stZG91YmxlIGxhYmVsLWljb24iPjwvaT4gU3VjY2Vzcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJ3YXJuaW5nIiBjbGFzcz0iYnRuLWxhYmVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtZXJyb3IgbGFiZWwtaWNvbiI+PC9pPiBXYXJuaW5nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9ImRhbmdlciIgY2xhc3M9ImJ0bi1sYWJlbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImJ4IGJ4LWJsb2NrIGxhYmVsLWljb24iPjwvaT4gRGFuZ2VyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9ImRhcmsiIGNsYXNzPSJidG4tbGFiZWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJieCBieC1sb2FkZXIgbGFiZWwtaWNvbiI+PC9pPiBEYXJrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9ImxpZ2h0IiBjbGFzcz0iYnRuLWxhYmVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iYnggYngtaG91cmdsYXNzIGxhYmVsLWljb24iPjwvaT4gTGlnaHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXNpemUtMTUgbWItMyI+RXhhbXBsZSAzPC9oNT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24taXRlbXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9InByaW1hcnkiIGNsYXNzPSJ3LXNtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1kb3dubG9hZCBkLWJsb2NrIGZvbnQtc2l6ZS0xNiI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9ImxpZ2h0IiBjbGFzcz0idy1zbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktdXBsb2FkIGQtYmxvY2sgZm9udC1zaXplLTE2Ij48L2k+IFVwbG9hZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzdWNjZXNzIiBjbGFzcz0idy1zbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktcGVuY2lsIGQtYmxvY2sgZm9udC1zaXplLTE2Ij48L2k+IEVkaXQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0iZGFuZ2VyIiBjbGFzcz0idy1zbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9Im1kaSBtZGktdHJhc2gtY2FuIGQtYmxvY2sgZm9udC1zaXplLTE2Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVsZXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUiPkJ1dHRvbnMgU2l6ZXM8L2g0Pg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10aXRsZS1kZXNjIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIEFkZA0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGU+bGc8L2NvZGU+IG9yIDxjb2RlPnNtPC9jb2RlPiBmb3IgYWRkaXRpb25hbCBzaXplcy4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbi1pdGVtcyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gc2l6ZT0ibGciIHZhcmlhbnQ9InByaW1hcnkiPkxhcmdlIGJ1dHRvbjwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gc2l6ZT0ibGciPkxhcmdlIGJ1dHRvbjwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gc2l6ZT0ic20iIHZhcmlhbnQ9InByaW1hcnkiPlNtYWxsIGJ1dHRvbjwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gc2l6ZT0ic20iPlNtYWxsIGJ1dHRvbjwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+DQogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iY2FyZC10aXRsZSI+QnV0dG9ucyB3aWR0aDwvaDQ+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRpdGxlLWRlc2MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgQWRkDQogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZT4udy14czwvY29kZT4sIDxjb2RlPi53LXNtPC9jb2RlPiwgPGNvZGU+LnctbWQ8L2NvZGU+IGFuZA0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGU+LnctbGc8L2NvZGU+IGNsYXNzIGZvciBhZGRpdGlvbmFsIGJ1dHRvbnMgd2lkdGguDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24taXRlbXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9InByaW1hcnkiIGNsYXNzPSJ3LXhzIj5YczwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0iZGFuZ2VyIiBjbGFzcz0idy1zbSBtbC0xIj5TbWFsbDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0id2FybmluZyIgY2xhc3M9InctbWQgbWwtMSI+TWVkaXVtPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzdWNjZXNzIiBjbGFzcz0idy1sZyI+TGFyZ2U8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8IS0tIGVuZCByb3cgLS0+DQoNCiAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUiPkJ1dHRvbiB0YWdzPC9oND4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGl0bGUtZGVzYyI+DQogICAgICAgICAgICAgICAgICAgICAgICBUaGUNCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNsYXNzPSJoaWdobGlnaHRlci1yb3VnZSI+LmJ0bjwvY29kZT4NCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgYXJlIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aCB0aGUNCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNsYXNzPSJoaWdobGlnaHRlci1yb3VnZSI+Jmx0O2J1dHRvbiZndDs8L2NvZGU+IGVsZW1lbnQuDQogICAgICAgICAgICAgICAgICAgICAgICBIb3dldmVyLCB5b3UgY2FuIGFsc28gdXNlIHRoZXNlIGNsYXNzZXMgb24NCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNsYXNzPSJoaWdobGlnaHRlci1yb3VnZSI+Jmx0O2EmZ3Q7PC9jb2RlPiBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY2xhc3M9ImhpZ2hsaWdodGVyLXJvdWdlIj4mbHQ7aW5wdXQmZ3Q7PC9jb2RlPiBlbGVtZW50cw0KICAgICAgICAgICAgICAgICAgICAgICAgKHRob3VnaCBzb21lIGJyb3dzZXJzIG1heSBhcHBseSBhIHNsaWdodGx5IGRpZmZlcmVudCByZW5kZXJpbmcpLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9uLWl0ZW1zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGhyZWY9ImphdmFzY3JpcHQ6IHZvaWQoMCk7IiByb2xlPSJidXR0b24iPkxpbms8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiIHR5cGU9InN1Ym1pdCI+QnV0dG9uPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJ0biBidG4taW5mbyIgdHlwZT0iYnV0dG9uIiB2YWx1ZT0iSW5wdXQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJTdWJtaXQiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJ0biBidG4td2FybmluZyIgdHlwZT0icmVzZXQiIHZhbHVlPSJSZXNldCIgLz4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+DQogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iY2FyZC10aXRsZSI+VG9nZ2xlIHN0YXRlczwvaDQ+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRpdGxlLWRlc2MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgQWRkDQogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBjbGFzcz0iaGlnaGxpZ2h0ZXItcm91Z2UiPmRhdGEtdG9nZ2xlPSJidXR0b24iPC9jb2RlPg0KICAgICAgICAgICAgICAgICAgICAgICAgdG8gdG9nZ2xlIGEgYnV0dG9u4oCZcw0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY2xhc3M9ImhpZ2hsaWdodGVyLXJvdWdlIj5hY3RpdmU8L2NvZGU+DQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS4gSWYgeW914oCZcmUgcHJlLXRvZ2dsaW5nIGEgYnV0dG9uLCB5b3UgbXVzdCBtYW51YWxseSBhZGQgdGhlDQogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBjbGFzcz0iaGlnaGxpZ2h0ZXItcm91Z2UiPi5hY3RpdmU8L2NvZGU+IGNsYXNzDQogICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPmFuZDwvc3Ryb25nPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY2xhc3M9ImhpZ2hsaWdodGVyLXJvdWdlIj5hcmlhLXByZXNzZWQ9InRydWUiPC9jb2RlPiB0byB0aGUNCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNsYXNzPSJoaWdobGlnaHRlci1yb3VnZSI+Jmx0O2J1dHRvbiZndDs8L2NvZGU+Lg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9uLWl0ZW1zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBkYXRhLXRvZ2dsZT0iYnV0dG9uIiBhcmlhLXByZXNzZWQ9ImZhbHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaW5nbGUgdG9nZ2xlDQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPCEtLSBlbmQgcm93IC0tPg0KDQogICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJjYXJkLXRpdGxlIj5CbG9jayBCdXR0b25zPC9oND4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGl0bGUtZGVzYyI+DQogICAgICAgICAgICAgICAgICAgICAgICBDcmVhdGUgYmxvY2sgbGV2ZWwgYnV0dG9uc+KAlHRob3NlIHRoYXQgc3BhbiB0aGUgZnVsbCB3aWR0aCBvZiBhDQogICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnTigJRieSBhZGRpbmcNCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNsYXNzPSJoaWdobGlnaHRlci1yb3VnZSI+LmJ0bi1ibG9jazwvY29kZT4uDQogICAgICAgICAgICAgICAgICAgIDwvcD4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIGJsb2NrIHZhcmlhbnQ9InByaW1hcnkiIHNpemU9ImxnIj5CbG9jayBMZXZlbCBCdXR0b248L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIGJsb2NrIHNpemU9InNtIj5CbG9jayBMZXZlbCBCdXR0b248L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPg0KICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUiPkNoZWNrYm94ICYgUmFkaW8gQnV0dG9uczwvaDQ+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRpdGxlLWRlc2MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgQm9vdHN0cmFw4oCZcw0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY2xhc3M9ImhpZ2hsaWdodGVyLXJvdWdlIj4uYnV0dG9uPC9jb2RlPiBzdHlsZXMgY2FuIGJlDQogICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWVkIHRvIG90aGVyIGVsZW1lbnRzLCBzdWNoIGFzDQogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBjbGFzcz0iaGlnaGxpZ2h0ZXItcm91Z2UiPiZsdDtsYWJlbCZndDs8L2NvZGU+cywgdG8gcHJvdmlkZQ0KICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3ggb3IgcmFkaW8gc3R5bGUgYnV0dG9uIHRvZ2dsaW5nLiBBZGQNCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNsYXNzPSJoaWdobGlnaHRlci1yb3VnZSI+ZGF0YS10b2dnbGU9ImJ1dHRvbnMiPC9jb2RlPiB0byBhDQogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBjbGFzcz0iaGlnaGxpZ2h0ZXItcm91Z2UiPi5idG4tZ3JvdXA8L2NvZGU+IGNvbnRhaW5pbmcgdGhvc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkIGJ1dHRvbnMgdG8gZW5hYmxlIHRvZ2dsaW5nIGluIHRoZWlyIHJlc3BlY3RpdmUgc3R5bGVzLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC02Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1mb3JtLWNoZWNrYm94LWdyb3VwIHYtbW9kZWw9InNlbGVjdGVkQ2hlY2siIDpvcHRpb25zPSJvcHRpb25zQ2hlY2siIG5hbWU9ImJ1dHRvbnMtMSIgYnV0dG9ucyBidXR0b24tdmFyaWFudD0icHJpbWFyeSI+PC9iLWZvcm0tY2hlY2tib3gtZ3JvdXA+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC02Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1mb3JtLXJhZGlvLWdyb3VwIGlkPSJidG4tcmFkaW9zLTEiIHYtbW9kZWw9InNlbGVjdGVkIiA6b3B0aW9ucz0ib3B0aW9ucyIgYnV0dG9ucyBuYW1lPSJyYWRpb3MtYnRuLWRlZmF1bHQiPjwvYi1mb3JtLXJhZGlvLWdyb3VwPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDwhLS0gZW5kIHJvdyAtLT4NCg0KICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+DQogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iY2FyZC10aXRsZSI+QnV0dG9uIGdyb3VwPC9oND4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGl0bGUtZGVzYyI+DQogICAgICAgICAgICAgICAgICAgICAgICBXcmFwIGEgc2VyaWVzIG9mIGJ1dHRvbnMgd2l0aA0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY2xhc3M9ImhpZ2hsaWdodGVyLXJvdWdlIj4uYnRuPC9jb2RlPiBpbg0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY2xhc3M9ImhpZ2hsaWdodGVyLXJvdWdlIj4uYnRuLWdyb3VwPC9jb2RlPi4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uLWdyb3VwPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0icHJpbWFyeSI+TGVmdDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJwcmltYXJ5Ij5NaWRkbGU8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0icHJpbWFyeSI+UmlnaHQ8L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24tZ3JvdXA+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbi1ncm91cCBjbGFzcz0ibXQtNCBtdC1tZC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImJ4IGJ4LW1lbnUtYWx0LXJpZ2h0Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJieCBieC1tZW51Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJieCBieC1tZW51LWFsdC1sZWZ0Ij48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWJ1dHRvbi1ncm91cD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJjYXJkLXRpdGxlIj5CdXR0b24gdG9vbGJhcjwvaDQ+DQogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRpdGxlLWRlc2MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgQ29tYmluZSBzZXRzIG9mIGJ1dHRvbiBncm91cHMgaW50byBidXR0b24gdG9vbGJhcnMgZm9yIG1vcmUNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXggY29tcG9uZW50cy4gVXNlIHV0aWxpdHkgY2xhc3NlcyBhcyBuZWVkZWQgdG8gc3BhY2Ugb3V0DQogICAgICAgICAgICAgICAgICAgICAgICBncm91cHMsIGJ1dHRvbnMsIGFuZCBtb3JlLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLXRvb2xiYXIiIHJvbGU9InRvb2xiYXIiIGFyaWEtbGFiZWw9IlRvb2xiYXIgd2l0aCBidXR0b24gZ3JvdXBzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0bi1ncm91cCBtci0yIiByb2xlPSJncm91cCIgYXJpYS1sYWJlbD0iRmlyc3QgZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiPjE8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5Ij4yPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+MzwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiPjQ8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIG1yLTIiIHJvbGU9Imdyb3VwIiBhcmlhLWxhYmVsPSJTZWNvbmQgZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiPjU8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5Ij42PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+NzwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiIHJvbGU9Imdyb3VwIiBhcmlhLWxhYmVsPSJUaGlyZCBncm91cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+ODwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDwhLS0gZW5kIHJvdyAtLT4NCg0KICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+DQogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iY2FyZC10aXRsZSI+U2l6aW5nPC9oND4NCiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGl0bGUtZGVzYyI+DQogICAgICAgICAgICAgICAgICAgICAgICBJbnN0ZWFkIG9mIGFwcGx5aW5nIGJ1dHRvbiBzaXppbmcgY2xhc3NlcyB0byBldmVyeSBidXR0b24gaW4gYQ0KICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAsIGp1c3QgYWRkDQogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBjbGFzcz0iaGlnaGxpZ2h0ZXItcm91Z2UiPi5idG4tZ3JvdXAtKjwvY29kZT4gdG8gZWFjaA0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY2xhc3M9ImhpZ2hsaWdodGVyLXJvdWdlIj4uYnRuLWdyb3VwPC9jb2RlPiwgaW5jbHVkaW5nIGVhY2gNCiAgICAgICAgICAgICAgICAgICAgICAgIG9uZSB3aGVuIG5lc3RpbmcgbXVsdGlwbGUgZ3JvdXBzLg0KICAgICAgICAgICAgICAgICAgICA8L3A+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIGJ0bi1ncm91cC1sZyIgcm9sZT0iZ3JvdXAiIGFyaWEtbGFiZWw9IkJhc2ljIGV4YW1wbGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPkxlZnQ8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij5NaWRkbGU8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij5SaWdodDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAgbXQtMiIgcm9sZT0iZ3JvdXAiIGFyaWEtbGFiZWw9IkJhc2ljIGV4YW1wbGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+TGVmdDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+TWlkZGxlPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5Ij5SaWdodDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICA8YnIgLz4NCg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAgYnRuLWdyb3VwLXNtIG10LTIiIHJvbGU9Imdyb3VwIiBhcmlhLWxhYmVsPSJCYXNpYyBleGFtcGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIiPkxlZnQ8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIiPk1pZGRsZTwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWRhbmdlciI+UmlnaHQ8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJjYXJkLXRpdGxlIj5WZXJ0aWNhbCB2YXJpYXRpb248L2g0Pg0KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10aXRsZS1kZXNjIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIE1ha2UgYSBzZXQgb2YgYnV0dG9ucyBhcHBlYXIgdmVydGljYWxseSBzdGFja2VkIHJhdGhlciB0aGFuDQogICAgICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsbHkuIFNwbGl0IGJ1dHRvbiBkcm9wZG93bnMgYXJlIG5vdCBzdXBwb3J0ZWQgaGVyZS4NCiAgICAgICAgICAgICAgICAgICAgPC9wPg0KICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24tZ3JvdXAgdmVydGljYWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8Yi1idXR0b24gdmFyaWFudD0ic2Vjb25kYXJ5Ij5CdXR0b248L2ItYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItZHJvcGRvd24gdmFyaWFudD0ic2Vjb25kYXJ5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgc2xvdD0iYnV0dG9uLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEcm9wZG93bg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibWRpIG1kaS1jaGV2cm9uLWRvd24iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWRyb3Bkb3duLWl0ZW0+RHJvcGRvd24gTGluazwvYi1kcm9wZG93bi1pdGVtPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiLWRyb3Bkb3duLWl0ZW0+RHJvcGRvd24gTGluazwvYi1kcm9wZG93bi1pdGVtPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9iLWRyb3Bkb3duPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHZhcmlhbnQ9InNlY29uZGFyeSI+QnV0dG9uPC9iLWJ1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB2YXJpYW50PSJzZWNvbmRhcnkiPkJ1dHRvbjwvYi1idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDwvYi1idXR0b24tZ3JvdXA+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPCEtLSBlbmQgcm93IC0tPg0KPC9MYXlvdXQ+DQo="},null]}